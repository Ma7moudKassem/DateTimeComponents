@namespace DateTimeComponents.Client
@typeparam TValue

@switch (DateTimeType)
{
    case DateTimeType.DateTime:
        {
            <input class="form-control pr-2" id="@ComponentId" type="datetime-local" value="@InternalValue.ToString($"{DateTimeFormat}")" @onchange="OnValueChanged" disabled="@(!Enabled)" />
            break;
        }
    case DateTimeType.Time:
        {
            <input class="form-control pr-2" id="@ComponentId" type="time" value="@TiemInternalValue.ToString($"{TimeFormat}")" @onchange="OnValueChanged" disabled="@(!Enabled)" />
            break;
        }
    default: break;
}

@code {

    private long ComponentId = DateTime.Now.Ticks;

    [Parameter] public bool Enabled { get; set; } = true;
    [Parameter] public string TimeFormat { get; set; } = "hh\\:mm";
    [Parameter] public string DateTimeFormat { get; set; } = "yyyy\\:MM\\:dd";
    [Parameter] public TValue Value { get; set; }
    [Parameter] public DateTimeType DateTimeType { get; set; }
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }

    private DateTime InternalValue { get; set; } = DateTime.Now;
    private TimeSpan TiemInternalValue { get; set; }


    private void OnValueChanged(ChangeEventArgs args)
    {
        if (DateTimeType.Equals(DateTimeType.DateTime))
        {

            DateTime dateTime = DateTime.Now;

            string value = args.Value.ToString();

            dateTime = value == string.Empty ? DateTime.Today : DateTime.Parse(value);

            Value = (TValue)(object)dateTime;
            InternalValue = dateTime;
            ValueChanged.InvokeAsync(Value);
        }
        else
        {
            if (!TimeSpan.TryParseExact(args.Value.ToString(), "hh\\:mm\\:ss", null, out var result))
                return;

            TiemInternalValue = result;
            Value = (TValue)(object)result;
            ValueChanged.InvokeAsync(Value);
        }
    }
}